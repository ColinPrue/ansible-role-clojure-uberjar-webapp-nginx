upstream {{ clojure_uberjar_webapp_nginx_upstream_name }} {
    server 127.0.0.1:{{ clojure_uberjar_webapp_app_http_port }};
    # put more servers here for load balancing
    # keepalive(reuse TCP connection) improves performance
    keepalive 32;
}

server {
    server_name {{ clojure_uberjar_webapp_nginx_server_name }};

    location {{ clojure_uberjar_webapp_nginx_static_location }} {  # static content
        alias {{ clojure_uberjar_webapp_nginx_static_alias }};
    }
    
    location / {
        proxy_pass  http://{{ clojure_uberjar_webapp_nginx_upstream_name }};

        # tell http-kit to keep the connection
        proxy_http_version 1.1;
        proxy_set_header Connection "";

        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;

        proxy_set_header x-forwarded-host  $host;
        proxy_set_header x-forwarded-proto $scheme;
        proxy_set_header x-forwarded-port  $server_port;


        access_log  /var/log/nginx/{{ clojure_uberjar_webapp_app_name }}.access.log;
        error_log   /var/log/nginx/{{ clojure_uberjar_webapp_app_name }}.error.log;
    }

    {% if letsencrypt_installed.stat.exists %}
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/{{ clojure_uberjar_webapp_nginx_server_name }}/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/{{ clojure_uberjar_webapp_nginx_server_name }}/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
    {% endif %}
}

{{ clojure_uberjar_webapp_nginx_additional_config }}

{% if letsencrypt_installed.stat.exists %}
server {
    if ($host = {{ clojure_uberjar_webapp_nginx_server_name }}) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    server_name {{ clojure_uberjar_webapp_nginx_server_name }};
    listen 80;
    return 404; # managed by Certbot
}
{% endif %}